apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-module-name', "rxlcemodel-${project.name}"]
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

project.sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':base')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    api 'com.jakewharton:disklrucache:2.0.2'

    testImplementation "junit:junit:${commonLibVersions.junit}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${commonLibVersions.mockito_kotlin}"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar, javadocJar
}

def libId = 'disklrucache'
def libName = 'disklrucache'
def libDesc = "Jake Wharton's DiskLruCache delegate for RxLceModel"

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }

    scm {
        connection projectScm
        developerConnection projectScm
        url projectUrl
    }
}

publishing {
    publications {
        // Creates a Maven publication called "release".
        release(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId = rootProject.group
            artifactId = libId
            version = rootProject.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', libDesc)
                root.appendNode('name', libName)
                root.appendNode('url', projectUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['release']
    publish = true
    override = true
    dryRun = project.hasProperty('dryRun') ? project.property('dryRun').toBoolean() : true
    pkg {
        userOrg = bintrayUserOrg
        repo = bintrayRepoName
        name = libName
        desc = libDesc
        licenses = ['Apache-2.0']
        websiteUrl = projectUrl
        vcsUrl = projectScm
        publicDownloadNumbers = true
        version {
            name = rootProject.version
            released = new Date()
        }
    }
}

bintrayUpload.dependsOn(assemble, generatePomFileForReleasePublication)
