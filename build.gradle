apply plugin: 'org.ajoberstar.grgit'
apply from: 'gradle/versioning.gradle'

buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.ajoberstar:gradle-git:1.7.2'
    }
}

version = buildVersionName()
group = "com.motorro.rxlcemodel"

ext {
    // Android
    androidBuildToolsVersion = '28.0.3'
    androidMinSdkVersion = 15
    androidTargetSdkVersion = 28
    androidCompileSdkVersion = 28
    versionName = project.version
    versionCode = buildVersionCode()

    //Bin-tray
    bintrayUserOrg="motorro"
    bintrayRepoName="RxLceModel"
}

allprojects {
    ext {
        commonLibVersions = [
                // Code
                "rx_java": "2.2.6",
                "koptional": "1.3.0",

                // Tests
                "junit": "4.12",
                "mockito_kotlin": "2.1.0"
        ]
    }

    repositories {
        google()
        jcenter()
    }

    // Test Logging
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '  ', endItem = '  '
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task runBaseUnitTests(type: Task, dependsOn: [':base:cleanTest', ':base:test'], group: 'verification') {
    description 'Run unit tests for Bbase library.'
}

task runDiskLruUnitTests(type: Task, dependsOn: [':disklrucache:cleanTest', ':disklrucache:test'], group: 'verification') {
    description 'Run unit tests for DiskLruCache library.'
}

task runUnitTests(type: Task, dependsOn: ['runBaseUnitTests', 'runDiskLruUnitTests'], group: 'verification') {
    description 'Run unit tests for libraries.'
}

task displayVersion(type: Task, group: 'documentation') {
    description 'Display application version name'
    doLast {
        println("Project version: ${project.version}")
    }
}


