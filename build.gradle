import org.jetbrains.dokka.gradle.DokkaTask

buildscript {
    ext.kotlin_version = '1.5.30'
    ext.dokka_version = '1.4.0'
    repositories {
        google()
        mavenCentral()
        maven {
            name = 'ajoberstar-backup'
            url = 'https://ajoberstar.github.io/bintray-backup/'
        }
        maven {
            url="https://plugins.gradle.org/m2/"
        }
        maven {
            url="https://dl.bintray.com/kotlin/dokka"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.30'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '3.0.0'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.dokka' version "$dokka_version"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

apply from: 'gradle/versioning.gradle'
apply from: 'gradle/maven-publish-config.gradle'

setVersion(buildVersionName())
group = "com.motorro.rxlcemodel"
setDescription("A reactive data loading for Android based on RxJava and `Loading`/`Content`/`Error` states.")

ext {
    // Android
    androidBuildToolsVersion = '30.0.2'
    androidMinSdkVersion = 15
    androidTargetSdkVersion = 30
    androidCompileSdkVersion = 30
    versionName = project.version
    versionCode = buildVersionCode()

    //Bin-tray
    developerId = 'motorro'
    developerName = 'Nikolai Kotchetkov'
    developerEmail = 'motorro@gmail.com'

    bintrayUserOrg = "motorro"
    bintrayRepoName = "RxLceModel"

    projectScm = 'https://github.com/motorro/RxLceModel.git'
    projectUrl = 'https://github.com/motorro/RxLceModel'

    // Dokka
    docDir = "${projectDir}/docs"
}

allprojects {
    ext {
        commonLibVersions = [
                // Code
                "rx_java": "2.2.21",
                "koptional": "1.7.0",
                "core_ktx_version": "1.6.0",
                "lifecycle_version": "2.3.1",
                "arch_version": "2.1.0",
                "nav_version": '2.3.5',
                "work_version": '2.6.0',

                // Tests
                "junit": '4.13.2',
                "mockito_kotlin": "2.2.0"
        ]
    }

    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    // Test Logging
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '  ', endItem = '  '
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    tasks.withType(DokkaTask).configureEach {
        outputDirectory.set(new File("$buildDir/javadoc"))
        dokkaSourceSets {
            named("main") {
                noAndroidSdkLink.set(false)
                includes.from ("${projectDir}/module.md")
                externalDocumentationLink {
					url.set(new URL ("http://reactivex.io/RxJava/2.x/javadoc/"))
					packageListUrl.set(new URL ("http://reactivex.io/RxJava/2.x/javadoc/package-list"))
				}
            }
        }
    }
}

task runBaseUnitTests(type: Task, dependsOn: [':base:cleanTest', ':base:test'], group: 'verification') {
    description 'Run unit tests for Bbase library.'
}

task runDiskLruUnitTests(type: Task, dependsOn: [':disklrucache:cleanTest', ':disklrucache:test'], group: 'verification') {
    description 'Run unit tests for DiskLruCache library.'
}

task runKserializerUnitTests(type: Task, dependsOn: [':kserializer:cleanTest', ':kserializer:test'], group: 'verification') {
    description 'Run unit tests for KSerializer library.'
}

task runViewmodelUnitTests(type: Task, dependsOn: [':viewmodel:cleanTest', ':viewmodel:test'], group: 'verification') {
    description 'Run unit tests for ViewModel library.'
}

task runSampleUnitTests(type: Task, dependsOn: [':sample:cleanTest', ':sample:test'], group: 'verification') {
    description 'Run unit tests for Sample application.'
}

task runUnitTests(
        type: Task,
        dependsOn: [
                'runBaseUnitTests',
                'runDiskLruUnitTests',
                'runKserializerUnitTests',
                'runSampleUnitTests'
        ],
        group: 'verification'
) {
    description 'Run unit tests for libraries.'
}

task displayVersion(type: Task, group: 'documentation') {
    description 'Display application version name'
    doLast {
        println("Project version: ${project.version}")
    }
}

dokkaGfmMultiModule.configure {
    outputDirectory = new File(docDir)
    documentationFileName.set("module.md")
}
dokkaHtmlMultiModule.configure {
    outputDirectory = new File(docDir)
    documentationFileName.set("module.md")
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

