buildscript {
    ext.kotlin_version = '1.7.10'
    ext.dokka_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
        maven {
            url="https://plugins.gradle.org/m2/"
        }
        maven {
            url="https://dl.bintray.com/kotlin/dokka"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.5.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '3.0.0'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.dokka' version "$dokka_version"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

apply from: 'gradle/versioning.gradle'
apply from: 'gradle/maven-publish-config.gradle'

setVersion(buildVersionName())
group = "com.motorro.rxlcemodel"
setDescription("A reactive data loading for Android based on RxJava and `Loading`/`Content`/`Error` states.")

ext {
    // Android
    androidBuildToolsVersion = '33.0.0'
    androidMinSdkVersion = 24
    androidTargetSdkVersion = 33
    androidCompileSdkVersion = 33
    versionName = project.version
    versionCode = buildVersionCode()

    //Bin-tray
    developerId = 'motorro'
    developerName = 'Nikolai Kotchetkov'
    developerEmail = 'motorro@gmail.com'

    bintrayUserOrg = "motorro"
    bintrayRepoName = "RxLceModel"

    projectScm = 'https://github.com/motorro/RxLceModel.git'
    projectUrl = 'https://github.com/motorro/RxLceModel'

    // Dokka
    docDir = "${projectDir}/docs"
}

allprojects {
    ext {
        commonLibVersions = [
                // Code
                "rx_java": '3.1.5',
                "core_ktx_version": '1.8.0',
                "lifecycle_version": '2.5.1',
                "arch_version": "2.1.0",
                "nav_version": '2.5.1',
                "work_version": '2.7.1',

                // Tests
                "junit": '4.13.2',
                "mockito_kotlin": "2.2.0",
                "mockative": "1.2.6",

                // Compose
                "compose_compiler_version": "1.3.0",
                "compose_ui_version": '1.2.1',
                "compose_ui_tooling_version": '1.2.1',
                "compose_ui_foundation_version": '1.2.1',
                "compose_ui_material_version": '1.2.1',
                "compose_ui_activity_version": "1.4.0",
                "compose_viewmodel_version": '2.5.1',
                "compose_livedata_version": "1.2.0",
                "compose_accompanist_version": '0.25.1',
                "compose_ui_test_manifest_version": '1.2.1',
                "compose_ui_test_vi_version": '1.2.1'
        ]
    }

    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += [
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xinline-classes"
            ]
        }
    }

    // Test Logging
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '  ', endItem = '  '
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}

task runLceUnitTests(type: Task, dependsOn: [':lce:test'], group: 'verification') {
    description 'Run unit tests for Lce library.'
}

task runCacheUnitTests(type: Task, dependsOn: [':cache:check'], group: 'verification') {
    description 'Run unit tests for Cache library.'
}

task runRxUnitTests(type: Task, dependsOn: [':rx:test'], group: 'verification') {
    description 'Run unit tests for Rx library.'
}

task runDiskLruUnitTests(type: Task, dependsOn: [':disklrucache:test'], group: 'verification') {
    description 'Run unit tests for DiskLruCache library.'
}

task runKserializerUnitTests(type: Task, dependsOn: [':kserializer:test'], group: 'verification') {
    description 'Run unit tests for KSerializer library.'
}

task runViewmodelUnitTests(type: Task, dependsOn: [':viewmodel:testDebugUnitTest'], group: 'verification') {
    description 'Run unit tests for ViewModel library.'
}

task runComposeViewUnitTests(type: Task, dependsOn: [':composeview:testDebugUnitTest'], group: 'verification') {
    description 'Run unit tests for Compose-view library.'
}

task runSampleUnitTests(type: Task, dependsOn: [':sample:testDebugUnitTest'], group: 'verification') {
    description 'Run unit tests for Sample application.'
}

task runUnitTests(
        type: Task,
        dependsOn: [
                'runLceUnitTests',
                'runCacheUnitTests',
                'runRxUnitTests',
                'runDiskLruUnitTests',
                'runKserializerUnitTests',
                'runViewmodelUnitTests',
                'runComposeViewUnitTests',
                'runSampleUnitTests'
        ],
        group: 'verification'
) {
    description 'Run unit tests for libraries.'
}

task displayVersion(type: Task, group: 'documentation') {
    description 'Display application version name'
    doLast {
        println("Project version: ${project.version}")
    }
}

dokkaGfmMultiModule.configure {
    outputDirectory = new File(docDir)
    includes.from("module.md")
}
dokkaHtmlMultiModule.configure {
    outputDirectory = new File(docDir)
    includes.from("module.md")
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

