apply plugin: 'org.ajoberstar.grgit'
apply from: 'gradle/versioning.gradle'

buildscript {
    ext.kotlin_version = '1.3.61'
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.17'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.0.0'
        classpath 'com.novoda:bintray-release:0.9.1'
        classpath 'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0'
    }
}

setVersion(buildVersionName())
group = "com.motorro.rxlcemodel"

ext {
    // Android
    androidBuildToolsVersion = '29.0.2'
    androidMinSdkVersion = 15
    androidTargetSdkVersion = 29
    androidCompileSdkVersion = 29
    versionName = project.version
    versionCode = buildVersionCode()

    //Bin-tray
    bintrayUserOrg="motorro"
    bintrayRepoName="RxLceModel"

    // Dokka
    docDir = "${projectDir}/docs"
}

allprojects {
    ext {
        commonLibVersions = [
                // Code
                "rx_java": "2.2.16",
                "koptional": "1.6.0",

                // Tests
                "junit": '4.13',
                "mockito_kotlin": "2.2.0"
        ]
    }

    repositories {
        google()
        jcenter()
    }

    // Test Logging
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '  ', endItem = '  '
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task runBaseUnitTests(type: Task, dependsOn: [':base:cleanTest', ':base:test'], group: 'verification') {
    description 'Run unit tests for Bbase library.'
}

task runDiskLruUnitTests(type: Task, dependsOn: [':disklrucache:cleanTest', ':disklrucache:test'], group: 'verification') {
    description 'Run unit tests for DiskLruCache library.'
}

task runSampleUnitTests(type: Task, dependsOn: [':sample:cleanTest', ':sample:test'], group: 'verification') {
    description 'Run unit tests for Sample application.'
}

task runUnitTests(type: Task, dependsOn: ['runBaseUnitTests', 'runDiskLruUnitTests', 'runSampleUnitTests'], group: 'verification') {
    description 'Run unit tests for libraries.'
}

task displayVersion(type: Task, group: 'documentation') {
    description 'Display application version name'
    doLast {
        println("Project version: ${project.version}")
    }
}

/**
 * Finds sub-projects that need dokka generation
 * Place `apply plugin: 'org.jetbrains.dokka'` there
 * @return A set of projects that have dokka task
 */
Set<Project> findDokkaProjects() {
    subprojects.findAll {
        !it.tasks.findAll { "dokka" == it.getName() }.isEmpty()
    }
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
    outputDirectory = docDir
    outputFormat = "gfm"
    includes = ["${projectDir}/module.md"]

    externalDocumentationLink {
        url = new URL ("http://reactivex.io/RxJava/2.x/javadoc/")
        packageListUrl = new URL ("http://reactivex.io/RxJava/2.x/javadoc/package-list")
    }

    dependsOn {
        delete docDir
        findDokkaProjects().collect {
            it.tasks.getByName("dokka")
        }
    }

    doFirst {
        def dokkaProjects = findDokkaProjects()

        classpath = dokkaProjects.collect { project -> project.jar.outputs.files.getFiles() }.flatten()
        classpath += files(dokkaProjects.collect { project -> project.sourceSets.main.compileClasspath })

        sourceDirs = files(dokkaProjects.collect { project -> "${project.projectDir}/src/main/kotlin" })
    }
}


